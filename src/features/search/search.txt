import { faMagnifyingGlass, faXmark } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useState } from 'react';
import styled from 'styled-components';
import { DropDown } from './drop-down';
import { useAppDispatch, useAppSelector } from '../../hook';
import { reset, search } from './search.slice';

type Props = {};

export const Search: React.FC<Props> = () => {
  const [isSearchActive, setIsSearchActive] = useState<boolean>(false);
  const [searchedText, setSearchedText] = useState<string>('');
  const dispatch = useAppDispatch();
  const { searchedPosts } = useAppSelector(({ search }) => search);

  return (
    <RelativeContainer>
      <>
        {isSearchActive ? (
          <>
            <SearchInput
              placeholder="Search..."
              value={searchedText}
              onChange={(event) => {
                setSearchedText(event.currentTarget.value);
                dispatch(search(event.currentTarget.value));
              }}
            ></SearchInput>
            <InputRightAction>
              <CloseInputIcon
                onClick={() => {
                  setSearchedText('');
                  dispatch(reset());
                }}
              >
                <FontAwesomeIcon icon={faXmark} />
              </CloseInputIcon>
              <SearchIconWrapper
                onClick={() => setIsSearchActive(!isSearchActive)}
              >
                <FontAwesomeIcon icon={faMagnifyingGlass} />
              </SearchIconWrapper>
            </InputRightAction>
            {
              <DropDown
                posts={searchedPosts.results}
                searchedString={searchedText}
              ></DropDown>
            }
          </>
        ) : (
          <>
            <SearchInputAlternative></SearchInputAlternative>
            <SearchIconWrapper
              onClick={() => setIsSearchActive(!isSearchActive)}
            >
              <FontAwesomeIcon icon={faMagnifyingGlass} />
            </SearchIconWrapper>
          </>
        )}
      </>
    </RelativeContainer>
  );
};

const InputRightAction = styled.div`
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  right: 0;
  display: flex;
  align-items: center;
`;
const RelativeContainer = styled.div`
  position: relative;
  width: 90%;
`;

const SearchIconWrapper = styled.div`
  height: 100%;
  cursor: pointer;
  width: 30px;
  padding: 0 10px;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  border-left: 1px solid #5463ca;
  border-right: 1px solid #5463ca;
  font-size: 16px;
`;

const SearchInput = styled.input`
  height: 100%;
  position: relative;
  width: 100%;
  background-color: #5463ca;
  outline: none;
  box-sizing: border-box;
  border: none;
  color: white;
  &::placeholder {
    color: white;
    opacity: 0.6;
  }
`;
const CloseInputIcon = styled.div`
  color: white;
  background-color: #5463ca;
  display: flex;
  align-items: center;
  padding-right: 10px;
  font-size: 16px;
  cursor: pointer;
`;

const SearchInputAlternative = styled.div`
  width: 92%;
  padding: 0 15px;
  background-color: #2536a7;
  border: none;
`;
